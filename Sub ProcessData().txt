Sub ProcessData()
    Dim ws As Worksheet
    Dim lastRow As Long, lastCol As Long
    Dim dict As Object
    Dim rng As Range, cell As Range
    Dim i As Integer, j As Integer
    
    ' Load CSV files into sheets
    LoadCSV "questionnaire.csv", "Questionnaire"
    LoadCSV "utilisation_du_sol.csv", "UtilisationDuSol"
    LoadCSV "materiel_agricole.csv", "MaterielAgricole"
    LoadCSV "post_superficie_exploitation.csv", "SuperficieExploitation"
    LoadCSV "status_juridique.csv", "StatusJuridique"
    
    ' Remove duplicate id_questionnaire values (keeping first entry)
    RemoveDuplicates "UtilisationDuSol", "A"
    RemoveDuplicates "MaterielAgricole", "A"
    RemoveDuplicates "StatusJuridique", "A"
    
    ' Aggregate numeric values in SuperficieExploitation
    AggregateColumn "SuperficieExploitation", "A"
    
    ' Merge data on id_questionnaire
    MergeSheets "Questionnaire", "UtilisationDuSol", "A"
    MergeSheets "Questionnaire", "MaterielAgricole", "A"
    MergeSheets "Questionnaire", "SuperficieExploitation", "A"
    MergeSheets "Questionnaire", "StatusJuridique", "A"
    
    ' Transform data dynamically
    TransformData "Questionnaire"
    
    ' Save to Excel
    ActiveWorkbook.SaveAs Filename:=ThisWorkbook.Path & "\questionnaire_transformed.xlsx", FileFormat:=xlOpenXMLWorkbook
    MsgBox "âœ… Transformation successful! File saved."
End Sub

Sub LoadCSV(fileName As String, sheetName As String)
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets(sheetName)
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Sheets.Add
        ws.Name = sheetName
    End If
    On Error GoTo 0
    
    With ws.QueryTables.Add(Connection:="TEXT;" & ThisWorkbook.Path & "\" & fileName, Destination:=ws.Range("A1"))
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = True
        .TextFileCommaDelimiter = True
        .Refresh
    End With
End Sub

Sub RemoveDuplicates(sheetName As String, col As String)
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(sheetName)
    lastRow = ws.Cells(ws.Rows.Count, col).End(xlUp).Row
    ws.Range(col & "1:" & col & lastRow).RemoveDuplicates Columns:=1, Header:=xlYes
End Sub

Sub AggregateColumn(sheetName As String, keyCol As String)
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(sheetName)
    lastRow = ws.Cells(ws.Rows.Count, keyCol).End(xlUp).Row
    
    Dim dict As Object
    Set dict = CreateObject("Scripting.Dictionary")
    
    Dim r As Integer
    For r = 2 To lastRow
        id = ws.Cells(r, 1).Value
        value = ws.Cells(r, 2).Value
        If dict.Exists(id) Then
            dict(id) = dict(id) + value
        Else
            dict.Add id, value
        End If
    Next r
    
    ws.Cells.Clear
    ws.Cells(1, 1).Value = "id_questionnaire"
    ws.Cells(1, 2).Value = "AggregatedValue"
    
    Dim k As Variant, rowIndex As Integer
    rowIndex = 2
    For Each k In dict.keys
        ws.Cells(rowIndex, 1).Value = k
        ws.Cells(rowIndex, 2).Value = dict(k)
        rowIndex = rowIndex + 1
    Next k
End Sub

Sub MergeSheets(mainSheet As String, mergeSheet As String, keyCol As String)
    Dim wsMain As Worksheet, wsMerge As Worksheet
    Set wsMain = ThisWorkbook.Sheets(mainSheet)
    Set wsMerge = ThisWorkbook.Sheets(mergeSheet)
    
    Dim lastRowMain As Long, lastRowMerge As Long
    lastRowMain = wsMain.Cells(Rows.Count, keyCol).End(xlUp).Row
    lastRowMerge = wsMerge.Cells(Rows.Count, keyCol).End(xlUp).Row
    
    Dim r As Integer, found As Range
   For r = 2 To lastRowMain
    ' Check if the cell is not empty before searching
    If Not IsEmpty(wsMain.Cells(r, 1).Value) Then
        ' Search for the value in the merged worksheet
        Set found = wsMerge.Range("A2:A" & lastRowMerge).Find(wsMain.Cells(r, 1).Value, LookAt:=xlWhole)
        
        ' If found, copy the corresponding row's values
        If Not found Is Nothing Then
            Dim lastCol As Integer
            lastCol = wsMain.Cells(r, Columns.Count).End(xlToLeft).Column + 1 ' Next empty column
            
            ' Ensure there are columns to copy before resizing
            Dim colCount As Integer
            colCount = found.EntireRow.Columns.Count - 1
            
            If colCount > 0 Then
                wsMain.Cells(r, lastCol).Resize(, colCount).Value = found.Offset(0, 1).Resize(, colCount).Value
            End If
        End If
    End If
Next r

End Sub

Sub TransformData(sheetName As String)
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(sheetName)
    lastRow = ws.Cells(Rows.Count, "A").End(xlUp).Row
    lastCol = ws.Cells(1, Columns.Count).End(xlToLeft).Column
    
    Dim newWs As Worksheet
    Set newWs = ThisWorkbook.Sheets.Add
    newWs.Name = "TransformedData"
    
    Dim dict As Object
    Set dict = CreateObject("Scripting.Dictionary")
    
    Dim r As Integer, c As Integer, key As String, value As String
    For r = 2 To lastRow
        key = ws.Cells(r, 1).Value
        If Not dict.Exists(key) Then
            dict.Add key, New Collection
        End If
        For c = 2 To lastCol
            value = ws.Cells(r, c).Value
            If value <> "" Then dict(key).Add value
        Next c
    Next r
    
    ' Write transformed data
    Dim rowIndex As Integer
    rowIndex = 2
    newWs.Cells(1, 1).Value = "id_questionnaire"
    newWs.Cells(1, 2).Value = "TransformedData"
    
    Dim k As Variant
    For Each k In dict.keys
        newWs.Cells(rowIndex, 1).Value = k
        newWs.Cells(rowIndex, 2).Value = Join(dict(k).ToArray, ", ")
        rowIndex = rowIndex + 1
    Next k
End Sub
